set nocompatible
filetype off

"{{{ PLUGINS
call plug#begin()
Plug 'itchyny/lightline.vim'
Plug 'godlygeek/tabular'
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-vinegar'      "better netrw
Plug 'tpope/vim-abolish'      "toggle casing (snake or camel) with crs and crc
Plug 'tpope/vim-dispatch'     "provides :Make and :Start
Plug 'tpope/vim-surround'     "provides mappings to surround stuff with stuff
Plug 'tpope/vim-commentary'   "mappings to comment/uncomment blocks of code
Plug 'tpope/vim-repeat'       "enables repeating commands from plugins
Plug 'ervandew/supertab'
Plug 'schickling/vim-bufonly'
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim',           { 'for': ['vue', 'html', 'typescript.tsx'] }
Plug 'cespare/vim-toml',          { 'for': 'toml' }
Plug 'davidhalter/jedi-vim',      { 'for': 'python' }
Plug 'digitaltoad/vim-pug',       { 'for': ['pug', 'jade', 'vue'] }
Plug 'posva/vim-vue',             { 'for': 'vue' }
Plug 'leafgarland/typescript-vim',{ 'for': 'typescript' }
Plug 'pangloss/vim-javascript',   { 'for': 'javascript' }
Plug 'fatih/vim-go',              { 'for': 'go' }
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'ncm2/ncm2-neosnippet'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'roxma/nvim-yarp'
Plug 'ncm2/ncm2'
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-path'
Plug '~/dev/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
Plug 'chriskempson/base16-vim'

" Plug 'martskins/vim-cargo-search',{ 'for': 'rust' }
" Plug 'tpope/vim-fugitive'
" Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
call plug#end()
"}}}

filetype plugin indent on

"{{{ GENERAL
syntax enable
" set re=1
set shortmess+=c
set timeoutlen=1000 ttimeoutlen=0
let g:ftplugin_sql_omni_key = '<C-j>'
set encoding=utf-8
set shell=/usr/bin/fish
set number relativenumber
set colorcolumn=100
set guifont=monospace
set nobk
set hid
set noswapfile
set textwidth=100
if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
set signcolumn=yes
set tabstop=2
set shiftwidth=2
set expandtab
set backspace=indent,eol,start
set autoindent
set pastetoggle=<leader>z
set clipboard=unnamed
set ignorecase
set history=100
set hlsearch
set showmatch
set wildmenu
set updatetime=300
set autoread
set ttyfast
set mouse=a
let mapleader = ','
let maplocalleader = "\\"
let g:python_host_prog="/usr/bin/python2.7"
let g:python3_host_prog="/usr/bin/python3"

set t_Co=256
set background=dark
set termguicolors
colorscheme base16-gruvbox-dark-hard
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
"}}}

" {{{ NCM2
autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect

" enter inserts newline when completion window is open
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
" }}}

" {{{ VIM-MARKDOWN
let g:markdown_fenced_languages = ['rust', 'go']
" }}}

"{{{ TAGBAR
let g:tagbar_foldlevel = 0
"}}}

"{{{ LIGHTLINE
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \ },
      \ }
set laststatus=2
set noshowmode
"}}}

" {{{ FUGITIVE
set diffopt+=vertical
" }}}

" {{{ SUPERTAB
let g:SuperTabDefaultCompletionType = "<c-n>"
" }}}

" {{{ FZF
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)
nmap <leader><tab> <plug>(fzf-maps-n)

command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".<q-args>, <bang>0)
command! -bang -nargs=? -complete=dir Files
 \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
" }}}

" {{{ NEOSNIPPET
  let g:neosnippet#enable_snipmate_compatibility = 1

  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  imap <expr><TAB>
   \ pumvisible() ? "\<C-n>" :
   \ neosnippet#expandable_or_jumpable() ?
   \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" }}}

" {{{ TAGBAR
nmap ,. :TagbarToggle<CR><C-w><C-w>
" }}}

" {{{ MAPPINGS
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".<q-args>, <bang>0)
command! WQ wq
command! Wq wq
command! W w
command! Q q
nnoremap <silent> <F3> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
nnoremap gev :e $MYVIMRC<CR>
nnoremap gsv :so $MYVIMRC<CR>
nnoremap <leader>ls :buffers<CR>:buffer<Space>
nnoremap <LeftMouse> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nmap <tab> :bnext<CR>
nmap <s-tab> :bprevious<CR>
nmap <c-p> :Files<CR>
nmap <c-l> :Buffers<CR>
nmap <c-f> :Rg<space>
nmap <leader>o :on<CR>
nmap <leader>bo :bo<CR>
nmap <leader>f :ALEFix<CR>
nmap <leader>dn :ALENext<CR>
nmap <leader>dp :ALEPrevious<CR>
nmap <leader>ba :bufdo bd<CR>
nmap <leader>o :only<CR>
nmap <leader>bo :bo<CR>
nmap <leader>S :,$s/\<<C-r><C-w>\>//gc<Left><Left><Left>
nmap <leader>s :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>
nmap <leader>w :!surf "duckduckgo.com?q="&<Left><Left>
nmap <leader>e :!
nmap <leader>be :!<UP><CR>
nmap <leader>x :%!xxd<CR>
nmap <C-v><C-v> gg<C-V>G$
nmap <c-s><c-v> :vsplit<CR>
nmap <c-s><c-h> :split<CR>
nmap <Down> :cnext<cr>
nmap <Up> :cprevious<cr>
nmap <space> ,
nmap <space><space> <C-^>
inoremap <C-c> <ESC>
inoremap <LeftMouse> <NOP>
vnoremap <leader>pj :!python -m json.tool<CR>
"}}}

"{{{ PROFILING
function! ProfileStart()
  :profile start profile.log
  :profile func *
  :profile file *
endfunction

function! ProfileStop()
  :profile stop
endfunction

command! ProfileStart :call ProfileStart()
command! ProfileStop :call ProfileStop()
"}}}

" {{{ ALE
let g:ale_fixers = {
      \ 'javascript': ['eslint'],
      \ 'typescript.tsx': ['eslint'],
      \ 'typescript': ['eslint'],
      \ 'go': ['goimports'],
      \ 'python': ['autopep8', 'isort'],
      \ 'html': ['prettier'],
      \ 'css': ['prettier'],
      \ 'ruby': ['rubocop'],
      \ 'kotlin': ['ktlint'],
      \ 'c': ['uncrustify'],
      \ 'rust': ['rustfmt'],
      \ 'vue': ['eslint'],
      \ '*': ['trim_whitespace']
      \}

autocmd BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx
autocmd BufNewFile,BufRead *.jsx setlocal filetype=javascript.jsx
let g:ale_completion_enabled = 0
let g:ale_disable_lsp = 1
let g:ale_fix_on_save = 1
let g:ale_lint_on_enter = 1
let g:ale_emit_conflict_warnings = 1
let g:ale_linters = {
      \ 'javascript': ['eslint'],
      \ 'typescript': ['tslint'],
      \ 'kotlin': ['ktlint'],
      \ 'cpp': [],
      \ 'vue': ['tslint', 'vls'],
      \ 'go': ['gobuild', 'golangci-lint'],
      \ 'python': ['flake8']
      \}
"}}}

"{{{ LCN
" let g:LanguageClient_loggingFile = '~/Desktop/lcn.log'
" let g:LanguageClient_loggingLevel = 'WARN'
let g:LanguageClient_diagnosticsList = 'Disabled'
let g:LanguageClient_hoverPreview = 'always'
let g:LanguageClient_completionPreferTextEdit = 0
let g:LanguageClient_useVirtualText = 'All'
let g:LanguageClient_echoProjectRoot = 0
let g:LanguageClient_preferredMarkupKind = ['plaintext']
let g:LanguageClient_applyCompletionAdditionalTextEdits = 0
let g:LanguageClient_serverCommands = {
    \ 'rust': ['ra_lsp_server'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'go': ['gopls'],
    \ }

let g:LanguageClient_documentHighlightDisplay = {
      \ 1: { "name": "Text", "texthl": "Visual" },
      \ 2: { "name": "Read", "texthl": "SpellLocal" },
      \ 3: { "name": "Write", "texthl": "SpellRare" },
      \ }

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> R :call LanguageClient#textDocument_rename()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> gr :call LanguageClient#textDocument_references()<CR>
nnoremap <silent> gi :call LanguageClient#textDocument_implementation()<CR>
noremap <leader>ca :call LanguageClient#textDocument_codeAction()<CR>
noremap <leader>cl :call LanguageClient#handleCodeLensAction()<CR>
nnoremap <c-s><c-s> :call LanguageClient#textDocument_documentHighlight()<CR>
command! Action :call LanguageClient#textDocument_codeAction()<CR>
"}}}
